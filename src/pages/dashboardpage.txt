// src/pages/DashboardPage.js
import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { Routes, Route, Outlet, useLocation, Navigate } from 'react-router-dom';
import Navbar from '../components/Layout/Navbar';
import Sidebar from '../components/Layout/Sidebar';

// Assuming these are defined in ../utils/eventTypes.js
import { USER_DATA_UPDATED_EVENT, BUDGET_ITEMS_UPDATED_EVENT, FINANCIAL_ENTITIES_UPDATED_EVENT } from '../utils/eventTypes';

import BudgetExcelView from '../components/Dashboard/BudgetExcelView';
import LoanEMITracker from '../components/Dashboard/LoanEMITracker';
import AIAssistant from '../components/Dashboard/AIAssistant';
import StockMonitor from '../components/Dashboard/StockMonitor';
import ProfileManager from '../components/Dashboard/ProfileManager';
import Card from '../components/UI/Card';
import { useAuth } from '../contexts/AuthContext';
import { getFinanceNews } from '../api/newsService';
import budgetService from '../api/budgetService';
import loanService from '../api/loanService';
// import emiService from '../api/emiService';
import md5 from 'md5';
import styles from './DashboardPage.module.css';

const formatCurrency = (amount, currency = 'INR') => {
  const numericAmount = Number(amount);
  if (isNaN(numericAmount)) {
    return new Intl.NumberFormat('en-IN', { style: 'currency', currency: currency, minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(0);
  }
  return new Intl.NumberFormat('en-IN', { style: 'currency', currency: currency, minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(numericAmount);
};

const API_BASE_URL_ENV_DASH = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';
const IMAGE_SERVER_URL_DASH = API_BASE_URL_ENV_DASH.endsWith('/api')
    ? API_BASE_URL_ENV_DASH.substring(0, API_BASE_URL_ENV_DASH.length - '/api'.length)
    : API_BASE_URL_ENV_DASH; // CORRECTED TYPO HERE
const DEFAULT_DASH_PROFILE_PIC = "https://via.placeholder.com/80.png?text=User";

const DashboardHome = () => {
  const { currentUser, loading: authIsLoading } = useAuth(); // CORRECTLY DESTRUCTURED HERE
  const location = useLocation();

  const [newsArticles, setNewsArticles] = useState([]);
  const [newsLoading, setNewsLoading] = useState(true);
  const [newsError, setNewsError] = useState(null);

  const [summaryData, setSummaryData] = useState({
    salary: 0, totalExpenses: 0, netSavings: 0, totalLoanPayments: 0, investmentAmount: 0,
  });
  const [summaryCalculating, setSummaryCalculating] = useState(true);
  const [summaryFetchError, setSummaryFetchError] = useState(null);

  const [dbBudgetItems, setDbBudgetItems] = useState([]);
  const [dbLoans, setDbLoans] = useState([]);

  const salaryStorageKey = useMemo(() => currentUser?.id ? `financeAppUserSalary_${currentUser.id}` : null, [currentUser]);

  const fetchAndCalculateSummary = useCallback(async () => {
    if (!currentUser?.id) {
      setSummaryData({ salary: 0, totalExpenses: 0, netSavings: 0, totalLoanPayments: 0, investmentAmount: 0 });
      setDbBudgetItems([]);
      setDbLoans([]);
      setSummaryCalculating(false);
      return;
    }

    setSummaryCalculating(true);
    setSummaryFetchError(null);

    let fetchedBudgetItems = [];
    let fetchedLoans = [];

    try {
      const [budgetItemsResponse, loansResponse] = await Promise.all([
        budgetService.getBudgetItems().catch(err => {
            console.error("[DashboardHome] fetchAndCalc: Error fetching budget items:", err.response?.data || err.message);
            setSummaryFetchError(prevErr => prevErr ? `${prevErr}, Budget fetch failed.` : "Failed to load budget data.");
            return [];
        }),
        loanService.getLoans().catch(err => {
            console.error("[DashboardHome] fetchAndCalc: Error fetching loans:", err.response?.data || err.message);
            return [];
        }),
      ]);

      fetchedBudgetItems = Array.isArray(budgetItemsResponse) ? budgetItemsResponse : [];
      fetchedLoans = Array.isArray(loansResponse) ? loansResponse : [];

      setDbBudgetItems(fetchedBudgetItems);
      setDbLoans(fetchedLoans);

      const manuallySetSalaryFallback = parseFloat(localStorage.getItem(salaryStorageKey)) || 0;

      const getNumericAmount = (item, field = 'plannedAmount') => parseFloat(item?.[field]) || 0;

      const dbSalaryItem = fetchedBudgetItems.find(item => item.type === 'income' && item.category?.toLowerCase() === 'salary');
      let primarySalary = getNumericAmount(dbSalaryItem);

      if (primarySalary === 0 && manuallySetSalaryFallback > 0 && !dbSalaryItem) {
          primarySalary = manuallySetSalaryFallback;
      }

      let calculatedTotalIncome = primarySalary;
      let calculatedTotalExpenses = 0;
      let calculatedInvestmentAmount = 0;

      fetchedBudgetItems.forEach(item => {
        const amount = getNumericAmount(item);
        if (item.type === 'income') {
          if (!(item.category?.toLowerCase() === 'salary' && item.id === dbSalaryItem?.id)) {
            calculatedTotalIncome += amount;
          }
        } else if (item.type === 'expense') {
          calculatedTotalExpenses += amount;
          if (item.category?.toLowerCase().includes('investment') || item.category?.toLowerCase().includes('savings')) {
            calculatedInvestmentAmount += amount;
          }
        }
      });

      let calculatedLoanPayments = fetchedLoans.reduce((sum, loan) => {
        return sum + (parseFloat(loan.monthlyPaymentCalculated) || 0);
      }, 0);

      const calculatedNetSavings = calculatedTotalIncome - calculatedTotalExpenses;

      const newSummary = {
        salary: calculatedTotalIncome,
        totalExpenses: calculatedTotalExpenses,
        netSavings: calculatedNetSavings,
        totalLoanPayments: calculatedLoanPayments,
        investmentAmount: calculatedInvestmentAmount,
      };
      setSummaryData(newSummary);

    } catch (error) {
      console.error("[DashboardHome] fetchAndCalc: Overall critical error:", error);
      const criticalErrorMsg = error.message || "A critical error occurred while generating the summary.";
      setSummaryFetchError(prevErr => prevErr ? `${prevErr}, ${criticalErrorMsg}`: criticalErrorMsg);
      setSummaryData({ salary: 0, totalExpenses: 0, netSavings: 0, totalLoanPayments: 0, investmentAmount: 0 });
    }
    setSummaryCalculating(false);
  }, [currentUser, salaryStorageKey]);

  useEffect(() => {
    if (currentUser?.id && !authIsLoading) { // USE authIsLoading HERE
      fetchAndCalculateSummary();
    }

    const handleDataUpdate = (event) => {
      if (currentUser?.id) {
        fetchAndCalculateSummary();
      }
    };

    window.addEventListener(USER_DATA_UPDATED_EVENT, handleDataUpdate);
    window.addEventListener(BUDGET_ITEMS_UPDATED_EVENT, handleDataUpdate);
    window.addEventListener(FINANCIAL_ENTITIES_UPDATED_EVENT, handleDataUpdate);

    return () => {
      window.removeEventListener(USER_DATA_UPDATED_EVENT, handleDataUpdate);
      window.removeEventListener(BUDGET_ITEMS_UPDATED_EVENT, handleDataUpdate);
      window.removeEventListener(FINANCIAL_ENTITIES_UPDATED_EVENT, handleDataUpdate);
    };
  }, [currentUser, authIsLoading, fetchAndCalculateSummary]); // USE authIsLoading HERE

  useEffect(() => {
    const newsApiKey = process.env.REACT_APP_NEWS_API_KEY;
    const shouldFetchNews = newsApiKey && newsApiKey !== 'YOUR_NEWS_API_KEY' && newsApiKey !== 'YOUR_API_KEY';
    if (shouldFetchNews) {
        const fetchNews = async () => {
            setNewsLoading(true); setNewsError(null);
            try {
                const articles = await getFinanceNews();
                setNewsArticles(Array.isArray(articles) ? articles : []);
            } catch (error) {
                setNewsError(error.message || "Could not load news articles.");
                setNewsArticles([]);
            }
            setNewsLoading(false);
        };
        fetchNews();
    } else {
        setNewsLoading(false); setNewsArticles([]);
    }
  }, []);

  const getProfilePicUrl = () => {
    if (currentUser?.profilePicUrl) {
      return `${IMAGE_SERVER_URL_DASH}${currentUser.profilePicUrl}?t=${new Date().getTime()}`;
    }
    if (currentUser?.username) {
      const hash = md5(currentUser.username.trim().toLowerCase());
      return `https://www.gravatar.com/avatar/${hash}?d=identicon&s=80`;
    }
    return DEFAULT_DASH_PROFILE_PIC;
  };

  if (authIsLoading && !currentUser) { // USE authIsLoading HERE
    return <Card title="Dashboard"><p className={styles.loadingText}>Initializing user session...</p></Card>;
  }
  if (!currentUser) {
    return <Card title="Dashboard"><p className={styles.errorMessage}>User not logged in. Please login again.</p></Card>;
  }

  return (
    <div className={styles.dashboardHome}>
      <Card className={styles.profileSummaryCard}>
        <div className={styles.profileHeader}>
          <img src={getProfilePicUrl()} alt="Profile" className={styles.profilePicDashboard} onError={(e) => { e.target.onerror = null; e.target.src = DEFAULT_DASH_PROFILE_PIC; }} />
          <div className={styles.profileInfo}>
            <h2>Welcome back, {currentUser.fullName || currentUser.username}!</h2>
            <p>Here's a quick overview of your finances.</p>
          </div>
        </div>
        {summaryCalculating && <p className={styles.loadingText}>Calculating financial summary...</p>}
        {summaryFetchError && <p className={styles.errorMessage}>{summaryFetchError}</p>}
        {!summaryCalculating && !summaryFetchError && (
          <div className={styles.financialSummaryGrid}>
            <SummaryBox title="Total Income" value={formatCurrency(summaryData.salary)} icon="ðŸ’µ" />
            <SummaryBox title="Total Expenses" value={formatCurrency(summaryData.totalExpenses)} icon="ðŸ’¸" colorStyle="redText" />
            <SummaryBox title="Net Savings" value={formatCurrency(summaryData.netSavings)} icon="ðŸ’°" colorStyle={summaryData.netSavings >= 0 ? "greenText" : "redText"} />
            <SummaryBox title="Loan/EMI Payments" value={formatCurrency(summaryData.totalLoanPayments)} icon="ðŸ’³" />
            <SummaryBox title="Investments Outflow" value={formatCurrency(summaryData.investmentAmount)} icon="ðŸ“ˆ" />
          </div>
        )}
      </Card>

      <Card title="Latest Finance News" className={styles.newsCard}>
        {newsLoading && <p className={styles.loadingText}>Loading news...</p>}
        {newsError && <p className={styles.errorMessage}>News Update: {newsError}</p>}
        {!newsLoading && !newsError && newsArticles.length > 0 && (
          <ul className={styles.newsList}>
            {newsArticles.map((article, index) => (
              <li key={article.url || `news-${index}-${Math.random()}`} className={styles.newsItem}>
                {article.urlToImage && <img src={article.urlToImage} alt={article.title || 'News'} className={styles.newsImage} onError={(e) => { e.target.style.display = 'none'; }}/>}
                <div className={styles.newsContent}>
                  <a href={article.url} target="_blank" rel="noopener noreferrer" className={styles.newsTitle}>{article.title || "Untitled Article"}</a>
                  <p className={styles.newsDescription}>{article.description?.substring(0, 100) || "No description."}...</p>
                  <small className={styles.newsSource}>{article.source?.name || "Unknown Source"} - {article.publishedAt ? new Date(article.publishedAt).toLocaleDateString() : "N/A"}</small>
                </div>
              </li>
            ))}
          </ul>
        )}
        {!newsLoading && !newsError && newsArticles.length === 0 && (
          <p className={styles.infoMessage}>No news articles found, or NewsAPI key might be missing/invalid (check console for warnings).</p>
        )}
      </Card>
    </div>
  );
};

const SummaryBox = ({ title, value, icon, colorStyle }) => (
  <div className={`${styles.summaryBox} ${colorStyle ? styles[colorStyle] : ''}`}>
    <span className={styles.summaryIcon}>{icon}</span>
    <div className={styles.summaryText}>
      <h4>{title}</h4>
      <p className={styles[colorStyle] || ''}>{value}</p>
    </div>
  </div>
);

export const DashboardPage = () => {
    const [isSidebarOpen, setIsSidebarOpen] = useState(window.innerWidth > 768);
    const toggleSidebar = () => setIsSidebarOpen(!isSidebarOpen);
    useEffect(() => {
        const handleResize = () => {
            if (window.innerWidth > 768) setIsSidebarOpen(true);
            else setIsSidebarOpen(false);
        };
        window.addEventListener('resize', handleResize);
        handleResize();
        return () => window.removeEventListener('resize', handleResize);
    }, []);
    const mainContentMarginClass = (window.innerWidth > 768 && isSidebarOpen) ? styles.mainContentOpen :
        (window.innerWidth > 768 && !isSidebarOpen) ? styles.mainContentCollapsed : '';
    return (
        <div className={styles.dashboardPageLayout}>
            <Navbar toggleSidebar={toggleSidebar} isSidebarOpen={isSidebarOpen} />
            <div className={styles.dashboardContainer}> {/* Changed from app-container */}
                <Sidebar isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />
                <main className={`${styles.mainDashboardContent} ${mainContentMarginClass}`}><Outlet /></main>
            </div>
        </div>
    );
};

export const DashboardRoutes = () => (
    <Routes>
        <Route path="/" element={<DashboardPage />}>
            <Route index element={<DashboardHome />} />
            <Route path="budget" element={<BudgetExcelView />} />
            <Route path="loans-emi" element={<LoanEMITracker />} />
            <Route path="stocks" element={<StockMonitor />} />
            <Route path="ai-assistant" element={<AIAssistant />} />
            <Route path="profile" element={<ProfileManager />} />
            {/* Fallback for unknown /dashboard sub-routes */}
            <Route path="*" element={<Navigate to="/dashboard" replace />} />
        </Route>
    </Routes>
);